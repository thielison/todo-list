{"version":3,"file":"main.js","mappings":"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","sources":["webpack://todo-list/./src/modules/dom-manager.js","webpack://todo-list/./src/modules/project-manager.js","webpack://todo-list/./src/index.js"],"sourcesContent":["import { projects as projectsAndTodosManager } from \"./project-manager.js\";\r\n\r\n// Export the updated data index of last project clicked\r\n// This data index will be used to add todos to a specific project\r\nexport let dataIndexOfLastProjectClicked = null;\r\n\r\n// FUNCTIONS RESPONSIBLE FOR MANAGING PROJECTS\r\n// Shows or hides both the form to input Project Name and the \"Add Project\" button\r\nconst toggleHideOrShowInputForProjectName = () => {\r\n    const addProjectButton = document.getElementById(\"add-project-button\");\r\n    const inputFormForProjectName = document.getElementById(\"project-name-input-form\");\r\n\r\n    if (inputFormForProjectName.style.display === \"flex\" && addProjectButton.style.display === \"none\") {\r\n        inputFormForProjectName.style.display = \"none\";\r\n        addProjectButton.style.display = \"flex\";\r\n        return;\r\n    }\r\n\r\n    inputFormForProjectName.style.display = \"flex\";\r\n    addProjectButton.style.display = \"none\";\r\n};\r\n\r\nconst toggleHideOrShowInputForToDoInfo = () => {\r\n    // Clear all to do info inputs after adding or canceling a to do\r\n    const inputs = document.querySelectorAll(\"#title, #description, #due-date\");\r\n    inputs.forEach((input) => {\r\n        input.value = \"\";\r\n    });\r\n\r\n    const toDoInformationForm = document.querySelector(\".todo-input-information-container\");\r\n\r\n    if (toDoInformationForm.style.display === \"none\") {\r\n        toDoInformationForm.style.display = \"flex\";\r\n        return;\r\n    }\r\n\r\n    toDoInformationForm.style.display = \"none\";\r\n};\r\n\r\nconst handleClickOnAddTaskButton = () => {\r\n    document.querySelector(\".todo-input-information-container\").style.display = \"block\";\r\n};\r\n\r\n// Define a function to handle project name clicks\r\nconst projectNameClickEventHandler = () => {\r\n    // Update the tasks header with the project name\r\n    const updateProjectsHeaderOnPage = (index) => {\r\n        const projectsArray = projectsAndTodosManager.getProjects();\r\n        const tasksHeader = document.querySelector(\".tasks-container .tasks-header\");\r\n        tasksHeader.textContent = projectsArray[index].projectName;\r\n    };\r\n\r\n    // Display the \"add task\" button on the page\r\n    const showAddTaskButton = () => {\r\n        const addTaskButton = document.querySelector(\".add-task-button\");\r\n        addTaskButton.style.display = \"block\";\r\n    };\r\n\r\n    // Handle a project name click event\r\n    const projectNameClicked = (event) => {\r\n        dataIndexOfLastProjectClicked = event.target.dataset.index;\r\n        updateProjectsHeaderOnPage(dataIndexOfLastProjectClicked);\r\n        displayAllTodosOfAProject(dataIndexOfLastProjectClicked);\r\n        showAddTaskButton();\r\n    };\r\n\r\n    return {\r\n        projectNameClicked,\r\n    };\r\n};\r\n\r\nconst removeProjectFromDOM = (project) => {\r\n    // Removes a project from the DOM\r\n    project.parentElement.remove();\r\n\r\n    // Updates the data-index attribute of all remaining projects in the DOM\r\n    // to reflect their new position in the projectsManager.projects array\r\n    let allProjects = document.querySelectorAll(\".project\");\r\n    for (let i = 0; i < allProjects.length; i++) {\r\n        allProjects[i].setAttribute(\"data-index\", i);\r\n    }\r\n};\r\n\r\n// Function to handle delete project button click\r\nconst handleClickOnDeleteProjectButton = (e) => {\r\n    // Remove the project from the DOM\r\n    removeProjectFromDOM(e.target);\r\n    // And remove the project from the projects array\r\n    projectsAndTodosManager.removeProject(e.target.parentElement.dataset.index);\r\n};\r\n\r\n// Delete project on each project name on the DOM\r\nconst createDeleteProjectButton = () => {\r\n    const deleteBtn = document.createElement(\"span\");\r\n    deleteBtn.className = \"delete-btn\";\r\n    return deleteBtn;\r\n};\r\n\r\n// Create a new list item that hold the name of the project\r\n// The data-index attribute set here on each project in the DOM\r\n// corresponds exactly to the index of the array that holds the Projects\r\nconst createListItemWithProjectName = (projectName, index) => {\r\n    let li = document.createElement(\"li\");\r\n    li.textContent = projectName;\r\n    li.setAttribute(\"data-index\", index);\r\n    li.classList.add(\"project\");\r\n\r\n    return li;\r\n};\r\n\r\n// Function do add an event listener to each list item (project name)\r\nconst addEventListenerToProjectNameListItem = (li) => {\r\n    li.addEventListener(\"click\", (e) => {\r\n        // Check if the clicked element is the delete button\r\n        if (e.target.className === \"delete-btn\") {\r\n            handleClickOnDeleteProjectButton(e);\r\n            return;\r\n        } else {\r\n            const projectsEventHandler = projectNameClickEventHandler();\r\n            projectsEventHandler.projectNameClicked(e);\r\n        }\r\n    });\r\n};\r\n\r\n// Function to append a new project name to the DOM\r\nconst appendProjectNameToDOM = (projectName, index) => {\r\n    // Select the projects unordered list from the DOM\r\n    const ul = document.querySelector(\".projects\");\r\n\r\n    // Create a new list item with project name and data-index\r\n    const li = createListItemWithProjectName(projectName, index);\r\n\r\n    // Add an event listener to each project (list item)\r\n    addEventListenerToProjectNameListItem(li);\r\n\r\n    // Create a delete button for the project\r\n    const deleteBtn = createDeleteProjectButton();\r\n\r\n    li.appendChild(deleteBtn);\r\n    ul.append(li);\r\n\r\n    // Toggle the visibility of the input for the project name\r\n    toggleHideOrShowInputForProjectName();\r\n};\r\n\r\n// FUNCTIONS RESPONSIBLE FOR MANAGING TO DOS\r\n// This function, when called, creates elements to display all the todos inside a specific project\r\nconst updateProjectTaskCount = (numOfToDosInsideAProject) => {\r\n    const taskCountSpan = document.getElementById(\"task-count\");\r\n    taskCountSpan.textContent = numOfToDosInsideAProject;\r\n};\r\n\r\nconst displayAllTodosOfAProject = (dataIndex) => {\r\n    const projectsAndTodosArray = projectsAndTodosManager.getProjects();\r\n\r\n    const taskList = document.querySelector(\".task-list\");\r\n    taskList.textContent = \"\";\r\n\r\n    const ul = document.createElement(\"ul\");\r\n\r\n    for (let i = 0; i < projectsAndTodosArray[dataIndex].todos.length; i++) {\r\n        const li = document.createElement(\"li\");\r\n        li.setAttribute(\"data-index\", i);\r\n\r\n        const div = document.createElement(\"div\");\r\n        div.className = \"to-do\";\r\n\r\n        const input = document.createElement(\"input\");\r\n        input.setAttribute(\"type\", \"checkbox\");\r\n        input.setAttribute(\"id\", `todo${i}`);\r\n        input.setAttribute(\"name\", `todo${i}`);\r\n\r\n        const label = document.createElement(\"label\");\r\n        label.setAttribute(\"for\", `todo${i}`);\r\n        label.textContent = projectsAndTodosArray[dataIndex].todos[i].title;\r\n\r\n        const dueDateP = document.createElement(\"p\");\r\n        dueDateP.textContent = \"some due date\";\r\n\r\n        const editTodoBtn = document.createElement(\"button\");\r\n        editTodoBtn.className = \"edit-to-do\";\r\n        editTodoBtn.textContent = \"Edit todo btn\";\r\n\r\n        const deleteTodoBtn = document.createElement(\"button\");\r\n        deleteTodoBtn.className = \"delete-to-do\";\r\n        deleteTodoBtn.textContent = \"Delete todo btn\";\r\n\r\n        div.append(input, label, dueDateP, editTodoBtn, deleteTodoBtn);\r\n\r\n        li.append(div);\r\n\r\n        ul.append(li);\r\n    }\r\n\r\n    taskList.append(ul);\r\n\r\n    updateProjectTaskCount(projectsAndTodosArray[dataIndex].todos.length);\r\n};\r\n\r\nexport {\r\n    toggleHideOrShowInputForProjectName,\r\n    appendProjectNameToDOM,\r\n    toggleHideOrShowInputForToDoInfo,\r\n    handleClickOnAddTaskButton,\r\n    displayAllTodosOfAProject,\r\n};\r\n","import { appendProjectNameToDOM, displayAllTodosOfAProject } from \"./dom-manager\";\r\n\r\n// This function manages an array of projects (an array of to-do items)\r\n// Each element in the array is an object with an id, projectName, and todos\r\nconst projectsAndToDosManager = () => {\r\n    const projects = [];\r\n\r\n    const getProjects = () => {\r\n        return projects;\r\n    };\r\n\r\n    const addNewProject = () => {\r\n        const projectNameInput = document.getElementById(\"project-name-input\");\r\n\r\n        let id = projects.length;\r\n        let todos = [];\r\n        let projectName = projectNameInput.value;\r\n\r\n        if (projectName === \"\") {\r\n            return;\r\n        }\r\n\r\n        projects.push({ id, projectName, todos });\r\n        appendProjectNameToDOM(projectName, id);\r\n\r\n        projectNameInput.value = \"\";\r\n    };\r\n\r\n    const removeProject = (index) => {\r\n        if (index > -1) {\r\n            projects.splice(index, 1);\r\n        }\r\n\r\n        // Updates the id of all remaining projects in the array to reflect\r\n        // their new position in the projectsManager.projects array\r\n        for (let i = 0; i < projects.length; i++) {\r\n            projects[i].id = i;\r\n        }\r\n    };\r\n\r\n    const addNewTodoToAProject = (toDoInfo, dataIndexOfTheProject) => {\r\n        if (dataIndexOfTheProject < 0 || dataIndexOfTheProject >= projects.length) {\r\n            alert(\"Invalid project index\");\r\n            return;\r\n        }\r\n\r\n        projects[dataIndexOfTheProject].todos.push(toDoInfo);\r\n\r\n        displayAllTodosOfAProject(dataIndexOfTheProject);\r\n\r\n        console.log(projects);\r\n    };\r\n\r\n    return { addNewProject, removeProject, getProjects, addNewTodoToAProject };\r\n};\r\n\r\nexport const projects = projectsAndToDosManager();\r\n","import { projects as projectsAndToDosManager } from \"./modules/project-manager.js\";\r\nimport {\r\n    toggleHideOrShowInputForProjectName,\r\n    toggleHideOrShowInputForToDoInfo,\r\n    handleClickOnAddTaskButton,\r\n    dataIndexOfLastProjectClicked,\r\n} from \"./modules/dom-manager.js\";\r\n\r\n// Handle click on the \"Add Project Button\" in the Projects Menu\r\nconst handleClickOnAddAndCancelProjectNameBtns = (submitProjectBtn) => {\r\n    submitProjectBtn.preventDefault();\r\n\r\n    if (submitProjectBtn.target.textContent === \"Add\") {\r\n        projectsAndToDosManager.addNewProject();\r\n    } else if (submitProjectBtn.target.textContent === \"Cancel\") {\r\n        toggleHideOrShowInputForProjectName();\r\n    }\r\n};\r\n\r\nconst getToDoInfoFromForm = (e) => {\r\n    e.preventDefault();\r\n\r\n    const formData = new FormData(document.getElementById(\"todo-input-form\"));\r\n    const title = formData.get(\"title\");\r\n    const description = formData.get(\"description\");\r\n    let dueDate = document.getElementById(\"due-date\").value;\r\n\r\n    return { title, description, dueDate };\r\n};\r\n\r\n// Button to create a new project (\"Add Project\" button)\r\ndocument.getElementById(\"add-project-button\").addEventListener(\"click\", toggleHideOrShowInputForProjectName);\r\n\r\n// Form to type project name... it opens when the user clicks on the \"Add Project\" button\r\ndocument.getElementById(\"project-name-input-form\").addEventListener(\"click\", handleClickOnAddAndCancelProjectNameBtns);\r\n\r\n// If user clicks on \"Add Task\" button, it will open a form to insert todo info\r\ndocument.querySelector(\".tasks-container .add-task-button\").addEventListener(\"click\", handleClickOnAddTaskButton);\r\n\r\ndocument.querySelector(\"body\").addEventListener(\"click\", (e) => {\r\n    if (e.target.id === \"btn-add-todo\") {\r\n        // Get to do info from form\r\n        const newTodo = getToDoInfoFromForm(e);\r\n\r\n        // Add new to do to the last project clicked (dataIndexOfLastProjectClicked)\r\n        projectsAndToDosManager.addNewTodoToAProject(newTodo, dataIndexOfLastProjectClicked);\r\n\r\n        // Hide form\r\n        toggleHideOrShowInputForToDoInfo();\r\n    } else if (e.target.id === \"btn-cancel-todo\") {\r\n        toggleHideOrShowInputForToDoInfo();\r\n    }\r\n});\r\n"],"names":["dataIndexOfLastProjectClicked","toggleHideOrShowInputForProjectName","addProjectButton","document","getElementById","inputFormForProjectName","style","display","toggleHideOrShowInputForToDoInfo","querySelectorAll","forEach","input","value","toDoInformationForm","querySelector","appendProjectNameToDOM","projectName","index","ul","li","createElement","textContent","setAttribute","classList","add","createListItemWithProjectName","addEventListener","e","target","className","dataset","projectsArray","projects","getProjects","updateProjectsHeaderOnPage","displayAllTodosOfAProject","project","parentElement","remove","allProjects","i","length","removeProjectFromDOM","removeProject","handleClickOnDeleteProjectButton","addEventListenerToProjectNameListItem","deleteBtn","createDeleteProjectButton","appendChild","append","dataIndex","projectsAndTodosArray","taskList","todos","div","label","title","dueDateP","editTodoBtn","deleteTodoBtn","numOfToDosInsideAProject","addNewProject","projectNameInput","id","push","splice","addNewTodoToAProject","toDoInfo","dataIndexOfTheProject","alert","console","log","projectsAndToDosManager","submitProjectBtn","preventDefault","newTodo","formData","FormData","get","description","dueDate","getToDoInfoFromForm"],"sourceRoot":""}