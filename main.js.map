{"version":3,"file":"main.js","mappings":"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","sources":["webpack://todo-list/./src/modules/dom-manager.js","webpack://todo-list/./src/modules/project-manager.js","webpack://todo-list/./src/index.js"],"sourcesContent":["import { projects } from \"./project-manager.js\";\r\n\r\n// FUNCTIONS RESPONSIBLE FOR MANAGING PROJECTS\r\n// Shows or hides both the form to input Project Name and the \"Add Project\" button\r\nconst toggleHideOrShowInputForProjectName = () => {\r\n    const addProjectButton = document.getElementById(\"add-project-button\");\r\n    const inputFormForProjectName = document.getElementById(\"project-name-input-form\");\r\n\r\n    if (inputFormForProjectName.style.display === \"flex\" && addProjectButton.style.display === \"none\") {\r\n        inputFormForProjectName.style.display = \"none\";\r\n        addProjectButton.style.display = \"flex\";\r\n        return;\r\n    }\r\n\r\n    inputFormForProjectName.style.display = \"flex\";\r\n    addProjectButton.style.display = \"none\";\r\n};\r\n\r\nconst handleClickOnProjectName = (event) => {\r\n    const array = projects.getProjects();\r\n    const dataIndexOfProjectNameClicked = event.target.dataset.index;\r\n    const tasksHeader = document.querySelector(\".tasks-container .tasks-header\");\r\n\r\n    // Change page header to show the name of a project based on the\r\n    // data-index of the list item and the array of projects\r\n    tasksHeader.textContent = array[dataIndexOfProjectNameClicked].projectName;\r\n\r\n    // Show \"add task button\" after a click on a project\r\n    document.querySelector(\".add-task-button\").style.display = \"block\";\r\n};\r\n\r\nconst removeProjectFromDOM = (project) => {\r\n    // Removes a project from the DOM\r\n    project.parentElement.remove();\r\n\r\n    // Updates the data-index attribute of all remaining projects in the DOM\r\n    // to reflect their new position in the projectsManager.projects array\r\n    let allProjects = document.querySelectorAll(\".project\");\r\n    for (let i = 0; i < allProjects.length; i++) {\r\n        allProjects[i].setAttribute(\"data-index\", i);\r\n    }\r\n};\r\n\r\n// Function to handle delete project button click\r\nconst handleClickOnDeleteProjectButton = (e) => {\r\n    // Remove the project from the DOM\r\n    removeProjectFromDOM(e.target);\r\n    // And remove the project from the projects array\r\n    projects.removeProject(e.target.parentElement.dataset.index);\r\n};\r\n\r\n// Delete project on each project name on the DOM\r\nconst createDeleteProjectButton = () => {\r\n    const deleteBtn = document.createElement(\"span\");\r\n    deleteBtn.className = \"delete-btn\";\r\n    return deleteBtn;\r\n};\r\n\r\n// Create a new list item that hold the name of the project\r\n// The data-index attribute set here on each project in the DOM\r\n// corresponds exactly to the index of the array that holds the Projects\r\nconst createListItemWithProjectName = (projectName, index) => {\r\n    let li = document.createElement(\"li\");\r\n    li.textContent = projectName;\r\n    li.setAttribute(\"data-index\", index);\r\n    li.classList.add(\"project\");\r\n\r\n    return li;\r\n};\r\n\r\n// Function do add an event listener to each list item (project name)\r\nconst addEventListenerToProjectNameListItem = (li) => {\r\n    li.addEventListener(\"click\", (e) => {\r\n        // Check if the clicked element is the delete button\r\n        if (e.target.className === \"delete-btn\") {\r\n            handleClickOnDeleteProjectButton(e);\r\n            return;\r\n        } else {\r\n            handleClickOnProjectName(e);\r\n        }\r\n    });\r\n};\r\n\r\n// Function to append a new project name to the DOM\r\nconst appendProjectNameToDOM = (projectName, index) => {\r\n    // Select the projects unordered list from the DOM\r\n    const ul = document.querySelector(\".projects\");\r\n\r\n    // Create a new list item with project name and data-index\r\n    const li = createListItemWithProjectName(projectName, index);\r\n\r\n    // Add an event listener to each project (list item)\r\n    addEventListenerToProjectNameListItem(li);\r\n\r\n    // Create a delete button for the project\r\n    const deleteBtn = createDeleteProjectButton();\r\n\r\n    li.appendChild(deleteBtn);\r\n    ul.append(li);\r\n\r\n    // Toggle the visibility of the input for the project name\r\n    toggleHideOrShowInputForProjectName();\r\n};\r\n\r\n// FUNCTIONS RESPONSIBLE FOR MANAGING TODOS\r\nconst toggleHideOrShowInputForToDoInfo = () => {\r\n    const toDoInformationForm = document.querySelector(\".todo-input-information-container\");\r\n\r\n    if (toDoInformationForm.style.display === \"none\") {\r\n        toDoInformationForm.style.display = \"block\";\r\n        return;\r\n    }\r\n\r\n    toDoInformationForm.style.display = \"none\";\r\n};\r\n\r\nexport { toggleHideOrShowInputForProjectName, appendProjectNameToDOM, toggleHideOrShowInputForToDoInfo };\r\n","import { appendProjectNameToDOM } from \"./dom-manager\";\r\n\r\n// This function manages an array of projects (an array of to-do items)\r\n// Each element in the array is an object with an id, projectName, and todos\r\nconst projectsManager = () => {\r\n    const projects = [];\r\n\r\n    const getProjects = () => {\r\n        return projects;\r\n    };\r\n\r\n    const addNewProject = () => {\r\n        const projectNameInput = document.getElementById(\"project-name-input\");\r\n\r\n        let id = projects.length;\r\n        let todos = [];\r\n        let projectName = projectNameInput.value;\r\n\r\n        if (projectName === \"\") {\r\n            return;\r\n        }\r\n\r\n        projects.push({ id, projectName, todos });\r\n        appendProjectNameToDOM(projectName, id);\r\n\r\n        projectNameInput.value = \"\";\r\n\r\n        console.log(projects);\r\n    };\r\n\r\n    const removeProject = (index) => {\r\n        if (index > -1) {\r\n            projects.splice(index, 1);\r\n        }\r\n\r\n        // Updates the id of all the remaining projects in the array\r\n        // to reflect their new position in the projectsManager.projects array\r\n        for (let i = 0; i < projects.length; i++) {\r\n            projects[i].id = i;\r\n        }\r\n\r\n        console.log(projects);\r\n    };\r\n\r\n    return { addNewProject, removeProject, getProjects };\r\n};\r\n\r\nexport const projects = projectsManager();\r\n","import { projects } from \"./modules/project-manager.js\";\r\nimport { toggleHideOrShowInputForProjectName, toggleHideOrShowInputForToDoInfo } from \"./modules/dom-manager.js\";\r\n\r\nconst toDoInformationForm = document.querySelector(\".todo-input-information-container\");\r\n\r\n// Handle click on the \"Add Project Button\" in the Projects Menu\r\nconst handleClickOnAddAndCancelProjectNameBtns = (submitProjectBtn) => {\r\n    submitProjectBtn.preventDefault();\r\n\r\n    if (submitProjectBtn.target.textContent === \"Add\") {\r\n        projects.addNewProject();\r\n    } else if (submitProjectBtn.target.textContent === \"Cancel\") {\r\n        toggleHideOrShowInputForProjectName();\r\n    }\r\n};\r\n\r\nconst handleClickOnAddTaskButton = () => {\r\n    toDoInformationForm.style.display = \"block\";\r\n\r\n    document.querySelector(\"#todo-input-form\").addEventListener(\"click\", handleClickOnAddAndCancelToDoBtns);\r\n};\r\n\r\nconst handleClickOnAddAndCancelToDoBtns = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (e.target.textContent === \"Add\") {\r\n        const toDo = getTodoDataFromForm();\r\n        console.log(toDo);\r\n        // projects.addNewProject();\r\n    } else if (e.target.textContent === \"Cancel\") {\r\n        toggleHideOrShowInputForToDoInfo();\r\n    }\r\n};\r\n\r\nconst getTodoDataFromForm = () => {\r\n    const formData = new FormData(document.getElementById(\"todo-input-form\"));\r\n    const title = formData.get(\"title\");\r\n    const description = formData.get(\"description\");\r\n\r\n    let dueDate = document.getElementById(\"due-date\");\r\n    dueDate.addEventListener(\"change\", function () {\r\n        dueDate = this.value;\r\n    });\r\n\r\n    const toDo = createNewToDo(title, description, dueDate.value);\r\n\r\n    return toDo;\r\n};\r\n\r\nconst createNewToDo = (title, description, dueDate) => {\r\n    return { title, description, dueDate };\r\n};\r\n\r\n// Button to create a new project (\"Add Project\" button)\r\ndocument.getElementById(\"add-project-button\").addEventListener(\"click\", () => toggleHideOrShowInputForProjectName());\r\n\r\n// Form to type project name... it opens when the user clicks on the \"Add Project\" button\r\ndocument.getElementById(\"project-name-input-form\").addEventListener(\"click\", handleClickOnAddAndCancelProjectNameBtns);\r\n\r\n// If user clicks on \"Add Task\" button, it will open a form to insert todo info\r\ndocument.querySelector(\".tasks-container .add-task-button\").addEventListener(\"click\", handleClickOnAddTaskButton);\r\n"],"names":["toggleHideOrShowInputForProjectName","addProjectButton","document","getElementById","inputFormForProjectName","style","display","addEventListenerToProjectNameListItem","li","addEventListener","e","target","className","event","array","projects","getProjects","dataIndexOfProjectNameClicked","dataset","index","querySelector","textContent","projectName","handleClickOnProjectName","project","parentElement","remove","allProjects","querySelectorAll","i","length","setAttribute","removeProjectFromDOM","removeProject","handleClickOnDeleteProjectButton","addNewProject","projectNameInput","id","value","push","todos","ul","createElement","classList","add","createListItemWithProjectName","deleteBtn","createDeleteProjectButton","appendChild","append","appendProjectNameToDOM","console","log","splice","projectsManager","toDoInformationForm","handleClickOnAddAndCancelToDoBtns","preventDefault","toDo","getTodoDataFromForm","toggleHideOrShowInputForToDoInfo","formData","FormData","title","get","description","dueDate","this","createNewToDo","submitProjectBtn"],"sourceRoot":""}